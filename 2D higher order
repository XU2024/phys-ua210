{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM6TREE3DQDBs8TO8Csok7+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/XU2024/phys-ua210/blob/main/2D%20higher%20order\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "-FNHL2ZTg86z",
        "outputId": "1436389e-808c-4098-c091-24428838cb5c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-2e96790c557e>\u001b[0m in \u001b[0;36m<cell line: 110>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    111\u001b[0m     \u001b[0mF\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0mG\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_G\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m     \u001b[0mF_half\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_f_half\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m     \u001b[0mG_half\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_G_half\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mU\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mG\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0mU_der\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_u_der\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF_half\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mG_half\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-5-2e96790c557e>\u001b[0m in \u001b[0;36mfind_f_half\u001b[0;34m(U, F)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0malpha\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mlambda_m\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mlambda_m\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0;31m# print(alpha.max())\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m     F_half = (alpha[:nx-1,0:3]*F[:nx-1,:]+alpha[:nx-1,3:6]*F[1:,:]-alpha[:nx-1,0:3]*\\\n\u001b[0m\u001b[1;32m     71\u001b[0m               alpha[:nx-1,3:6]*(U[1:,:]-U[:nx-1,:]))/(alpha[:nx-1,0:3]+alpha[:nx-1,3:6]) ## eq5\n\u001b[1;32m     72\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mF_half\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (299,3) (299,4) "
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#initialization\n",
        "nx = 300\n",
        "# ny = 1\n",
        "nt = 1000\n",
        "v_x0 = 0\n",
        "v_y0 = 0# initial velocity\n",
        "delta_x = 1\n",
        "delta_y = 1  ## y\n",
        "delta_t = 0.1\n",
        "gamma = 1.4\n",
        "U = np.zeros((nx, 4))\n",
        "G = np.zeros((nx, 4)) ## G\n",
        "F = np.zeros((nx, 4))\n",
        "F_half = np.zeros((nx, 4))\n",
        "G_half = np.zeros((nx, 4))\n",
        "U_der = np.zeros((nx, 4))\n",
        "\n",
        "# initialization of U\n",
        "for i in range(nx):\n",
        "    if i < nx / 2:\n",
        "        rho_L = 1\n",
        "        P_L = 0.8\n",
        "        U[i, 0:4] = np.array([rho_L, rho_L*v_x0, rho_L*v_y0,P_L])\n",
        "    else:\n",
        "        rho_R = 0.1\n",
        "        P_R = 0.1\n",
        "        U[i, 0:4] = np.array([rho_R, rho_R*v_x0,rho_R*v_y0, P_R])\n",
        "\n",
        "def find_f(U):      ## Find f_U and G_U\n",
        "    v_x = U[:, 1] / U[:,  0]  ## v in x-direction\n",
        "    v_y = U[:, 2] / U[:,  0]  ## v in y-direction\n",
        "    P = (gamma-1)*U[:,0]*(U[:,3]/U[:,0]-0.5*(v_x**2+v_y**2))\n",
        "    e = P/((gamma-1)*U[:,0])\n",
        "    F[:,0] = U[:,1]\n",
        "    F[:,1] = U[:,1]*v_x + P\n",
        "    F[:,2] = U[:,1]*v_y\n",
        "    F[:,3] = (U[:,0]*(e+0.5*(v_x**2+v_y**2))+P)*v_x\n",
        "    # print(F)\n",
        "    return F\n",
        "\n",
        "def find_G(U):      ## Find f_U and G_U\n",
        "    v_x = U[:, 1] / U[:,  0]  ## v in x-direction\n",
        "    v_y = U[:, 2] / U[:,  0]  ## v in y-direction\n",
        "    P = (gamma-1)*U[:,0]*(U[:,3]/U[:,0]-0.5*(v_x**2+v_y**2))\n",
        "    e = P/((gamma-1)*U[:,0])\n",
        "    G[:,0] = U[:,2]\n",
        "    G[:,1] = U[:,1]*v_y\n",
        "    G[:,2] = U[:,2]*v_y + P\n",
        "    G[:,3] = (U[:,0]*(e+0.5*(v_x**2+v_y**2))+P)*v_y\n",
        "    # print(F)\n",
        "    return F\n",
        "\n",
        "def find_f_half(U,F):\n",
        "    v_x = U[:, 1] / U[:,  0]\n",
        "    v_y = U[:, 2] / U[:,  0]\n",
        "    P = (gamma-1)*U[:,0]*(U[:,3]/U[:,0]-0.5*(v_x**2+v_y**2))\n",
        "    c_s = np.sqrt(P*gamma/U[:,0])\n",
        "    lambda_p = np.sqrt(v_x**2+v_y**2) + c_s\n",
        "    lambda_m = np.sqrt(v_x**2+v_y**2) - c_s\n",
        "    # print(lambda_m[1,0]*U[1,0,1])\n",
        "    alpha = np.zeros((nx,6)) #first three rows alpha plus, second three alpha minus\n",
        "    for i in range(nx-1):\n",
        "        for k in range(3):\n",
        "            alpha[i,k] = max(0, lambda_p[i], lambda_p[i+1])\n",
        "            alpha[i,k+3] = max(0, -lambda_m[i], -lambda_m[i+1])\n",
        "    # print(alpha.max())\n",
        "    F_half = (alpha[:nx-1,0:3]*F[:nx-1,:]+alpha[:nx-1,3:6]*F[1:,:]-alpha[:nx-1,0:3]*\\\n",
        "              alpha[:nx-1,3:6]*(U[1:,:]-U[:nx-1,:]))/(alpha[:nx-1,0:3]+alpha[:nx-1,3:6]) ## eq5\n",
        "    return F_half\n",
        "\n",
        "def find_G_half(U,F):\n",
        "    v_x = U[:, 1] / U[:,  0]\n",
        "    v_y = U[:, 2] / U[:,  0]\n",
        "    P = (gamma-1)*U[:,0]*(U[:,3]/U[:,0]-0.5*(v_x**2+v_y**2))\n",
        "    c_s = np.sqrt(P*gamma/U[:,0])\n",
        "    lambda_p = np.sqrt(v_x**2+v_y**2)+ c_s\n",
        "    lambda_m = np.sqrt(v_x**2+v_y**2) - c_s\n",
        "    # print(lambda_m[1,0]*U[1,0,1])\n",
        "    alpha = np.zeros((nx,6)) #first three rows alpha plus, second three alpha minus\n",
        "    for i in range(nx-1):\n",
        "        for k in range(3):\n",
        "            alpha[i,k] = max(0, lambda_p[i], lambda_p[i+1])\n",
        "            alpha[i,k+3] = max(0, -lambda_m[i], -lambda_m[i+1])\n",
        "    # print(alpha.max())\n",
        "    G_half = (alpha[:nx-1,0:3]*G[:nx-1,:]+alpha[:nx-1,3:6]*G[1:,:]-alpha[:nx-1,0:3]*\\\n",
        "              alpha[:nx-1,3:6]*(U[1:,:]-U[:nx-1,:]))/(alpha[:nx-1,0:3]+alpha[:nx-1,3:6])\n",
        "    return G_half\n",
        "\n",
        "\n",
        "\n",
        "def find_u_der(F_half, D_half, delta_x):\n",
        "    U_der = -(F_half[1:,:]-F_half[:-1,:])/delta_x - (G_half[1:,:]-G_half[:-1,:])/delta_x\n",
        "    U_der = np.append(U_der,[np.array([0,0,0,0])], axis=0) #4 coloums\n",
        "    U_der = np.vstack([np.array([0,0,0,0]),U_der])\n",
        "    # print(U_der)\n",
        "    return U_der\n",
        "\n",
        "def find_u(U, U_der,delta_t,ii):\n",
        "    # print(U)\n",
        "    # U_histor[i] = U[:nx-2,:,:]\n",
        "    if ii % 50 == 0:\n",
        "        plt.plot(range(nx), U[:,0])\n",
        "    U[:,:]= U[:,:] + delta_t*U_der\n",
        "    # print(U)\n",
        "    return U\n",
        "\n",
        "for i in range(nt):\n",
        "    F = find_f(U)\n",
        "    G = find_G(U)\n",
        "    F_half = find_f_half(U,F)\n",
        "    G_half = find_G_half(U,G)\n",
        "    U_der = find_u_der(F_half,G_half)\n",
        "    U = find_u(U,U_der,delta_t,i)\n",
        "\n",
        "plt.show()"
      ]
    }
  ]
}