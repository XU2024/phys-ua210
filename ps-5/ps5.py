# -*- coding: utf-8 -*-
"""PS5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfSnagzQLQgHDPFhhB8mUppJHP7xl6rH
"""

import math as math
import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
from scipy.integrate import quad

#a)
x = np.linspace(0, 6, 100)
def integrand(a):
  return x**(a-1)*np.e**(-x)

plt.plot(x, integrand(2),label='a=2')
plt.plot(x, integrand(3),label='a=3')
plt.plot(x, integrand(4),label='a=4')
plt.xlabel('x')
plt.ylabel('Integrand')
plt.title('The graph the integrand VS x')
plt.legend()

#e)
def gamma(a):
  def Newintegrand(z):
    return ((a-1)/(1-z)**2)*np.e**((a-1)*np.log(z*(a-1)/(1-z))-z*(a-1)/(1-z))#change of variables
  l=0 # lower limit
  u=1 # upper limit
  result, error = quad(Newintegrand, l, u)
  return result

print(gamma(1.5))

#f)
print(gamma(3))
print(gamma(6))
print(gamma(10))

import pandas as pd
from scipy import linalg
import matplotlib.pyplot as plt
import numpy as np
import csv
#a)
file=pd.read_csv('signal.dat', delimiter='|', header=0)
file

time=file.iloc[:,1] ## select all the rows and the second column
signal=file.iloc[:,2] ## seclect all the rows and the thrid column

plt.plot(time, signal,'.')
plt.xlabel('Time')
plt.ylabel('Signal')
plt.title('Signal Vs time')
plt.show()

#b)
## method 1: using SVD
A = np.column_stack([np.ones(time.shape), time, time**2, time**3])

U, S, VT = np.linalg.svd(A)
# the diagonal matrix has 0 on the main diagonal, so we use this method
S_inv = np.diag(np.linalg.pinv(np.diag(S)))
## Ax = U*S*VT*x = b
## x = A_inv*b =  V * 1/S * UT *b

A_inv = (VT.T).dot(S_inv).dot(U.T)

coefficients = A_inv.dot(signal) ## x value

# Create the polynomial model
model = np.poly1d(coefficients)


# Plot the original data and the fitted polynomial
plt.plot(time, signal, '.')
plt.plot(time, model(time), '--')
plt.xlabel('Time')
plt.ylabel('Signal')
plt.title('3rd order Fit')

plt.grid(True)
plt.show()

## method 2: using polyfit behind which the mechanism is SVD

def coeff(d):
  return np.polyfit(time, signal, d)

## the case when the degree is 3
model = np.poly1d(coeff(3))


plt.plot(time, signal, '.')
plt.plot(time, model(time), '--')
plt.xlabel('Time')
plt.ylabel('Signal')
plt.title('3rd order Fit')

plt.grid(True)
plt.show()


#c) Residue:
residuals = np.abs(signal - model(time))
residuals

#d) #method 1 degree=15
A = np.column_stack([np.ones(time.shape), time, time**2, time**3,
                     time**4, time**5, time**6, time**7, time**8,
                     time**9, time**10, time**11, time**12, time**13,
                     time**14, time**15])

U, S, VT = np.linalg.svd(A)
# the diagonal matrix has 0 on the main diagonal, so we use this method
S_inv = np.diag(np.linalg.pinv(np.diag(S)))
## Ax = U*S*VT*x = b
## x = A_inv*b =  V * 1/S * UT *b

A_inv = (VT.T).dot(S_inv).dot(U.T)

coefficients = A_inv.dot(signal)

# Create the polynomial model
model = np.poly1d(coefficients)


# Plot the original data and the fitted polynomial
plt.plot(time, signal, '.')
plt.plot(time, model(time), '--')
plt.xlabel('Time')
plt.ylabel('Signal')
plt.title('15th order Fit')

plt.grid(True)
plt.show()

##method 2: using polyfit

def coeff(d):
  return np.polyfit(time, signal, d)

## the case when the degree is 3
model = np.poly1d(coeff(15))


plt.plot(time, signal, '.')
plt.plot(time, model(time), '--')
plt.xlabel('Time')
plt.ylabel('Signal')
plt.title('15th order Fit')

plt.grid(True)
plt.show()
## calculate condition number
condition_numbers = []
design_matrix = np.vander(time, 15+ 1)
condition_numbers.append(cond(design_matrix))
print(condition_numbers)

## e)


A = np.column_stack([np.ones(time.shape), np.sin(time), np.cos(time)])

U, S, VT = np.linalg.svd(A)
# the diagonal matrix has 0 on the main diagonal, so we use this method
S_inv = np.diag(np.linalg.pinv(np.diag(S)))
## Ax = U*S*VT*x = b
## x = A_inv*b =  V * 1/S * UT *b

A_inv = (VT.T).dot(S_inv).dot(U.T)

coefficients = A_inv.dot(signal)

# Create the polynomial model
model = np.poly1d(coefficients)


# Plot the original data and the fitted polynomial
plt.plot(time, signal, '.')
plt.plot(time, model(time), '--')
plt.xlabel('Time')
plt.ylabel('Signal')
plt.title('Cosine and sine fit')

plt.grid(True)
plt.show()